generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid())
  email      String       @unique
  name       String?
  createdAt  DateTime     @default(now())
  profile    Profile?
  matches1   Match[]      @relation("MatchP1")
  matches2   Match[]      @relation("MatchP2")
  leaderboard Leaderboard?
  telemetry  Telemetry[]
}

model Profile {
  user      User   @relation(fields: [userId], references: [id])
  userId    String @id
  displayName String?
  avatarUrl   String?
}

enum Mode {
  SINGLEPLAYER
  MULTIPLAYER
}

model Match {
  id        String   @id @default(cuid())
  startedAt DateTime @default(now())
  endedAt   DateTime?
  mode      Mode
  p1        User     @relation("MatchP1", fields: [p1Id], references: [id])
  p1Id      String
  p2        User?    @relation("MatchP2", fields: [p2Id], references: [id])
  p2Id      String?
  p1Score   Int
  p2Score   Int
  winner    User?    @relation("MatchWinner", fields: [winnerId], references: [id])
  winnerId  String?
  chat      MatchChat[]
}

model Leaderboard {
  user      User   @relation(fields: [userId], references: [id])
  userId    String @id
  elo       Int    @default(1000)
  wins      Int    @default(0)
  losses    Int    @default(0)
  streak    Int    @default(0)
  updatedAt DateTime @updatedAt
  @@index([elo])
}

model MatchChat {
  id        String   @id @default(cuid())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  message   String
  createdAt DateTime @default(now())

  @@index([matchId])
}

model Telemetry {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  eventType String
  payload   Json
  createdAt DateTime @default(now())

  @@index([eventType])
  @@index([createdAt])
}
